#face detection - comparison - save new face - save data and time.

import cv2
import numpy as np
import os 

recognizer = None
try:
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    recognizer.read('trainer/trainer.yml')
except:
    print('No trained model available, skipping...')

cascadePath = "haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath)

font = cv2.FONT_HERSHEY_SIMPLEX

# initiate id counter
id = 0

def get_image(cv_camera_interface):
    ret, img = cv_camera_interface.read()
    # img = cv2.flip(img, -1) # Flip vertically
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    return gray

# Initialize and start realtime video capture
def initialize_camera(width=640, height=480):
    cam = cv2.VideoCapture(0)
    cam.set(3, width) # set video widht
    cam.set(4, height) # set video height

    return cam


def main_loop(cam):
    # Define min window size to be recognized as a face
    minW = 0.1*cam.get(3)
    minH = 0.1*cam.get(4)
    
    while True:
        # getting image
        img = get_image(cam)    
        

        # Trying to find faces
        faces = faceCascade.detectMultiScale( 
            img,
            scaleFactor = 1.2,
            minNeighbors = 5,
            minSize = (int(minW), int(minH)),
            )

        # Кусок кода с распознаванием и поиском в базе
        if recognizer:
            for(x,y,w,h) in faces:
                cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)
                id, confidence = recognizer.predict(img[y:y+h,x:x+w])

                # Check if confidence is less them 100 ==> "0" is perfect match 
                if (confidence < 100):
                    id = "Face %d" % id # names[id]
                    confidence = "  {0}%".format(round(100 - confidence))
                else:
                    id = "unknown"
                    confidence = "  {0}%".format(round(100 - confidence))
                
                cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
                cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  
        else:
            print('No recognizer available...')

        retrain = False

        # Кусок кода со сбором данных
        if len(faces) > 0:
            print('Found %d faces in image, adding to dataset' % len(faces))
            for face in faces:
                pass
                # trying to find in classifier
                for(x,y,w,h) in faces:
                    cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)
                    id, confidence = recognizer.predict(img[y:y+h,x:x+w])

        # Check if confidence is less them 100 ==> "0" is perfect match 
                if (confidence < 100):
                    id = "Face %d" % id # names[id]
                    confidence = "  {0}%".format(round(100 - confidence))
                else:
                    id = "unknown"
                    confidence = "  {0}%".format(round(100 - confidence))
        
                cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
                cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  
    
            pass

        cv2.imshow('camera',img) 

        k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
        if k == 27:
            break


    # Do a bit of cleanup
    print("\n [INFO] Exiting Program and cleanup stuff")
    cam.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    # TODO: create directories if they do not exist

    cam = initialize_camera(height=480, width=640)
    main_loop(cam)
